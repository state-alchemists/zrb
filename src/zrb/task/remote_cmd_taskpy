from zrb.helper.typing import (
    Any, Callable, Iterable, List, Mapping, Optional, Union, TypeVar
)
from zrb.helper.typecheck import typechecked
from zrb.task.any_task import AnyTask
from zrb.task_env.env import Env
from zrb.task_env.env_file import EnvFile
from zrb.task_group.group import Group
from zrb.task_input.any_input import AnyInput
from zrb.task.cmd_task import CmdTask, CmdVal

import os
import pathlib

TSingleRemoteCmdTask = TypeVar(
    'TSingleRemoteCmdTask', bound='SingleRemoteCmdTask'
)

@typechecked
class RemoteConfig:
    def __init__(self):
        pass


@typechecked
class SingleRemoteCmdTask(CmdTask):

    def __init__(
        self,
        name: str,
        group: Optional[Group] = None,
        inputs: Iterable[AnyInput] = [],
        envs: Iterable[Env] = [],
        env_files: Iterable[EnvFile] = [],
        icon: Optional[str] = None,
        color: Optional[str] = None,
        description: str = '',
        executable: Optional[str] = None,
        cmd: CmdVal = '',
        cmd_path: CmdVal = '',
        cwd: Optional[Union[str, pathlib.Path]] = None,
        upstreams: Iterable[AnyTask] = [],
        checkers: Iterable[AnyTask] = [],
        checking_interval: Union[float, int] = 0,
        retry: int = 2,
        retry_interval: Union[float, int] = 1,
        max_output_line: int = 1000,
        max_error_line: int = 1000,
        preexec_fn: Optional[Callable[[], Any]] = os.setsid,
        skip_execution: Union[bool, str, Callable[..., bool]] = False
    ):
        CmdTask.__init__(
            self,
            name,
            group,
            inputs,
            envs,
            env_files,
            icon,
            color,
            description,
            executable,
            cmd,
            cmd_path,
            cwd,
            upstreams,
            checkers,
            checking_interval,
            retry,
            retry_interval,
            max_output_line,
            max_error_line,
            preexec_fn,
            skip_execution
        )

    def copy(self) -> TSingleRemoteCmdTask:
        return super().copy()

    def _get_shell_env_map(self) -> Mapping[str, Any]:
        env_map = super()._get_shell_env_map()
        return env_map

